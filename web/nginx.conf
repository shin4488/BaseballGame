# nginxのworkerが動作するユーザ名
user nginx;

# workerプロセス数
# autoを指定すると、CPUのコア数と同数のworkerプロセス数を起動する
worker_processes auto;

# ログ出力（warn以上のログのみ出力する）
error_log /var/log/nginx/error.log warn;

# プロセスIDを記述したファイルの配置先
pid /var/run/nginx.pid;

events {
    # 1つのworkerプロセスが同時に処理できる接続数
    # リバースプロキシの場合、「リクエスト受付」「バックエンドへ通信」の2接続数が必要となる
    worker_connections 1024;
}

http {
    # httpレスポンスヘッダからサーバのバージョンを非表示とする（攻撃者への情報提供を防ぐため）
    server_tokens off;

    server {
        listen 80;
        # http接続時はhttpsにリダイレクト
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl;
        # TLSのみを受け付ける（SSLv3は脆弱性があるため受け付けない）
        ssl_protocols TLSv1.2 TLSv1.3;
        # 一度Httpsでアクセス後は、指定期間ブラウザがHttpsでリクエストを送るようにヘッダを設定
        add_header Strict-Transport-Security max-age=15768000;

        # 証明書の設定
        ssl_certificate /etc/nginx/ssl/server.crt;
        ssl_certificate_key /etc/nginx/ssl/server.key;

        # includeディレクティブは別ファイルのデータを読み込むときに使用する
        # nginxが用意したMIMEタイプと拡張子のマッピング
        # この記述が無いと「rel="stylesheet"」などを検知してくれない
        include /etc/nginx/mime.types;
        # マッピングに無いものはdefault_typeで指定したMIMEタイプとなる
        # 「octet-stream」は「汎用的なバイナリデータ」または「本当のタイプが不明なバイナリデータ」を表す
        default_type application/octet-stream;

        #「~」は正規表現を扱い、かつ大文字小文字を区別する
        location ~ /(image|style) {
            # root使用時は、「location+root」先のリソースを返却
            # alias使用時は、「alias」先のリソースを返却
            root /home/baseballApp/dist;
        }

        # 「*」は大文字小文字を区別しない
        location ~* /[0-9a-z]+/[0-9a-z]+ {
            return 404;
        }

        location / {
            # 指定ディレクトリ先を使用する
            root /home/baseballApp/dist;
            index index.html;
            # 「/」以降のパスがなんであろうとindex.htmlを返却
            try_files $uri $uri/ /index.html;
        }
    }
}